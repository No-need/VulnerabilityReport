using Microsoft.AspNetCore.Mvc.Filters;
using Newtonsoft.Json.Linq;
using System.Reflection.Metadata;

namespace VulnerabilityReport.Filter
{
    public class ModleBindingFilter: IActionFilter
    {
        private IHttpContextAccessor _contextAccessor;
        public ModleBindingFilter(IHttpContextAccessor httpContextAccessor)
        {
            _contextAccessor = httpContextAccessor;
        }

        public void OnActionExecuting(ActionExecutingContext context)
        {
            if (context.HttpContext.Request.HasFormContentType)
            {
                // 從表單中讀取參數
                foreach (var parameter in context.ActionDescriptor.Parameters)
                {
                    if (!context.ActionArguments.ContainsKey(parameter.Name))
                    {
                        context.ActionArguments[parameter.Name] = context.HttpContext.Request.Form[parameter.Name].FirstOrDefault();
                    }
                }
            }
            else
            {
                var contentType = context.HttpContext.Request.ContentType;
                if (contentType == null || !contentType.Contains("application/json")) return;
                JToken jtoken;
                context.HttpContext.Request.Body.Position = 0;
                // 從請求主體中讀取參數
                using (var reader = new StreamReader(context.HttpContext.Request.Body))
                {
                    var requestBody = reader.ReadToEndAsync().GetAwaiter().GetResult();
                    if (string.IsNullOrEmpty(requestBody)) return;
                    jtoken = JToken.Parse(requestBody);
                }
                //從body中讀取參數
                foreach (var parameter in context.ActionDescriptor.Parameters)
                {
                    if (!context.ActionArguments.ContainsKey(parameter.Name))
                    {
                        try
                        {
                            var paramJson = jtoken.SelectToken(parameter.Name);
                            if (paramJson != null)
                            {
                                var type = parameter.ParameterType;
                                context.ActionArguments[parameter.Name] = paramJson.ToObject(type);
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"發生錯誤:{ex.Message}");
                        }
                    }
                }
            }
        }

        public void OnActionExecuted(ActionExecutedContext context)
        {
            // 不需要實現此方法
        }
    }
}
