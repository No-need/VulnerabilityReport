import React, { Component, useState, useEffect } from 'react';
import { Link, useParams, useNavigate } from 'react-router-dom';
import CallAPI from '../Librarys/CallAPI'
import { Loading } from './shared/Loading'

function ReportHistory() {
    const { projectId } = useParams();
    const [loading, setLoading] = useState(true);
    const [content, setContent] = useState(<Loading size={4} ></Loading>);
    const [countContent, setCountContent] = useState(<h3>Loading...</h3>);

    const [info, setInfo] = useState({ name: "", desc: "" });
    const navigate = new useNavigate();
    useEffect(() => {
        if (loading) {
            GetInfo();
            GetReportList();
            GetProjectCount();
            return;
        } else {
            return;
        }
    });

    function GetInfo() {
        CallAPI({
            url: `report/project/${projectId}`,
            method: 'GET',
            success: (data) => {
                setLoading(false);
                setInfo({ id: data.id, name: data.name, desc: data.description });
            }
        });
    }

    function GetReportList() {
        CallAPI({
            url: `report/report/${projectId}`,
            method: 'GET',
            success: (data) => {
                setLoading(false);
                setContent(renderReportList(data));
            }
        });
    }

    function GetProjectCount() {
        CallAPI({
            url: `report/ProjectReportCount/${projectId}`,
            method: 'GET',
            success: (data) => {
                setLoading(false);
                setCountContent(renderCount(data));
            }
        });
    }

    function renderReportList(list) {
        return (          
                list.length > 0 ?
                list.map(p => {
                    return (
                        <tr key={p.reportID}>
                            <td>{p.reportID}</td>
                            <td>{p.date}</td>
                            <td>{p.version}</td>
                            <td>
                                <button className="btn btn-primary" onClick={() => navigate(`/report/${projectId}/${p.reportID}`, { state: { name: p.name, desc: p.description } })}>Edit</button>
                            </td>
                        </tr>
                    )
                }
                    )
                    : <tr><td colSpan="4" align="center"><h3 className="align-items-center">查無報告</h3></td></tr>         
        );
    }

    function renderCount(countData) {
        var reports = countData.reports;

        var titleList = countData.vulnerabilityTypes;

        if (reports.length == 0) return null;

        var thead = (
            <thead>
                <tr>
                    <th>Vulnerability</th>
                    {
                        reports.map(r => {
                            return (
                                <th key={r.id}>{r.id}</th>
                            )
                        })
                    }
                </tr>
            </thead>
        );

        var tbody = (
            <tbody>
                {
                    titleList.map((t,idx) => {
                        return (
                            <tr key={idx}>
                                <td>{renderVulnerabilityType(t)}</td>
                                {
                                    reports.map(r => {
                                        var v = r.vulnerabilities[idx];
                                        return (
                                            <td key={r.id}>{v.count} {renderFixed(v.fixed)}</td>
                                        )
                                    })
                                }
                            </tr>
                        );
                    })
                }
                <tr>
                    <td>Total</td>
                    {
                        reports.map(r => {
                            return (
                                <td key={r.id}>
                                    {r.total} {renderFixed(r.fixed)}
                                </td>
                            )
                        })
                    }
                </tr>
            </tbody>
        );

        return (
            <>
                {thead}
                {tbody}
            </>
        )
    }

    function renderVulnerabilityType(type) {
        var className;
        switch (type.level) {
            case "高風險":
                className = "text-danger";
                break;
            case "中風險":
                className = "text-warning";
                break;
            case "低風險":
                className = "text-primary";
                break;
            case "資訊":
                className = "text-muted";
                break;
            default:
                className = "text-muted";
                break;
        }
        return (
            <>
                <span className={className}>{type.name}</span>
            </>
        );
    }

    function renderFixed(fixed) {
        if (fixed == 0) return null;
        if (fixed > 0) {
            return (
                <>
                    <span className="bg-success text-white">-{fixed}</span>
                </>
            );
        }
        if (fixed < 0) {
            return <>
                <span className="bg-danger text-white">+{-fixed}</span>
            </>
        }
    }

    return (
        <>
            <div className="row">
                <div className="col-auto">
                    <h1>{info.name}</h1>
                </div>
                <div className="col-auto">
                    <Link to={{ pathname: `/report/${projectId}` }} className="btn btn-success">New Report</Link>
                    <button type="button" className="btn btn-primary" onClick={() => { navigate('/') }}>back</button>
                </div>
            </div>
            <table className='table table-striped table-bordered' aria-labelledby="tabelLabel">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Date</th>
                        <th>Version</th>
                        <th>Control</th>
                    </tr>
                </thead>
                <tbody>
                    {content}
                </tbody>
            </table>
            <table className='table table-striped table-bordered' aria-labelledby="tabelLabel">
                {countContent}
            </table>
        </>
    );
}

export { ReportHistory }