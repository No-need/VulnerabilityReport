using Microsoft.EntityFrameworkCore;
using System.Collections;
using VulnerabilityReport.Models.DataBase;
using VulnerabilityReport.Models.Project;

namespace VulnerabilityReport.Services
{
    public class ReportService
    {
        private VulnerabilityReportContext _db;

        public ReportService(VulnerabilityReportContext db)
        {
            _db = db;
        }

        #region project

        public List<Project> GetProjects()
        {
            return _db.Projects.ToList();
        }

        public bool ProjectExist(string id)
        {
            return _db.Projects.Any(x=>x.ID== id);
        }

        public void InsertProject(string id,string name,string desc)
        {
            Project project = new Project { 
                ID = id,
                Name = name,
                Description = desc
            };
            _db.Projects.Add(project);
            _db.SaveChanges();
        }

        public void UpdateProject(string id,string name,string desc)
        {
            var project = _db.Projects.First(x => x.ID == id);
            project.Name = name;
            project.Description = desc;
            _db.Projects.Update(project);
            _db.SaveChanges();
        }

        public void DeleteProject(string id) { 
            var project = _db.Projects.First(x => x.ID == id);
            _db.Projects.Remove(project);
            _db.SaveChanges();
        }

        public ProjectCountModel GetProjectReportCount(string id)
        {
            ProjectCountModel model = new ProjectCountModel();
            var reportList = _db.Reports.Include(r=>r.Vulnerabilities).OrderBy(x=>x.Date).ThenBy(x=>x.Version).Where(x=>x.ProjectID == id).ToList();

            if (!reportList.Any()) return model;

            var vulnerabilityList = reportList.SelectMany(x => x.Vulnerabilities).ToList();

            var levelNumber = new Dictionary<string, int>
            {
                {"高風險", 3},
                {"中風險", 2},
                {"低風險", 1},
                {"資訊", 0},
            };
            
            var typeList = vulnerabilityList.Select(x => new VulnerabilityTypeModel
            {
                Name = x.Name,
                Level = x.Level
            }).DistinctBy(x=>x.Name).OrderByDescending(x => levelNumber[x.Level]).ThenBy(x=>x.Name).ToList();

            var countConvert = (Report x, ReportCountModel? y) =>
            {
                return new ReportCountModel
                {
                    ID = x.ReportID,
                    Vulnerabilities = typeList.Select(z =>
                    {
                        var nowCount = x.Vulnerabilities.Where(y => y.Name == z.Name).Select(y => y.Count).FirstOrDefault();
                        var preCount = y?.Vulnerabilities.Where(y => y.Name == z.Name).Select(y => y.Count).FirstOrDefault()??nowCount;
                        return new VulnerabilityCountModel
                        {
                            Name = z.Name,
                            Count = nowCount,
                            Fixed = preCount - nowCount
                        };
                    }).ToList(),
                    Total = x.Vulnerabilities.Sum(y => y.Count),
                    Fixed = y?.Total==null?0: y.Total-x.Vulnerabilities.Sum(y => y.Count)
                };
            };

            var preReport = reportList.Select(x => countConvert(x,null)).FirstOrDefault();

            List<ReportCountModel> countList = new List<ReportCountModel>()
            {
               preReport
            };
            
            foreach (var r in reportList.Skip(1))
            {
                var nowReport = countConvert(r, preReport);
                countList.Add(nowReport);
                preReport = nowReport;
            }

            model.Reports = countList;
            model.VulnerabilityTypes = typeList;

            return model;
        }
        #endregion


        public Report GetReport(string id)
        {
            return _db.Reports.FirstOrDefault(x => x.ReportID == id);
        }

        public List<Report> GetReports(string projectId)
        {
            var list = _db.Reports.Where(x => x.ProjectID == projectId).ToList();
            return list;
        }

        public void InsertReport(string projectId,DateTime date,string? content)
        {
            int version = _db.Reports.Count(x => x.ProjectID == projectId && x.Date == date.Date)+1;
            Report report = new Report
            {
                ProjectID = projectId,
                Date = date.Date,
                ReportContent = content,
                ReportID = $"{projectId}-{date.ToString("yyyyMMdd")}-{version}",
                Version = version,
                ModifyTime = DateTime.Now,
            };
            _db.Reports.Add(report);
            var vulnerabilitys = ConvertContentToVulnerabilityList(report.ReportID,content);
            if (vulnerabilitys.Any())
            {
                _db.Vulnerabilities.AddRange(vulnerabilitys);
            }
            _db.SaveChanges();
        }

        public void UpdateReport(string reportId,string? content)
        {
            Report report = _db.Reports.First(x=>x.ReportID == reportId);
            report.ReportContent = content;
            report.ModifyTime = DateTime.Now;
            var deleteVulnerabilitys = _db.Vulnerabilities.Where(x=>x.ReportID == reportId).ToList();
            var vulnerabilitys = ConvertContentToVulnerabilityList(report.ReportID, content);
            _db.Vulnerabilities.RemoveRange(deleteVulnerabilitys);
            if (vulnerabilitys.Any())
            {
                _db.Vulnerabilities.AddRange(vulnerabilitys);
            }
            _db.SaveChanges();
        }

        public void DeleteReport(string reportId)
        {
            Report report = _db.Reports.First(x => x.ReportID == reportId);
            _db.Vulnerabilities.RemoveRange(_db.Vulnerabilities.Where(x => x.ReportID == reportId));
            _db.Reports.Remove(report);
            _db.SaveChanges();
        }

        private List<Vulnerability> ConvertContentToVulnerabilityList(string reportId ,string? content)
        {
            List<Vulnerability> vulnerabilities = new List<Vulnerability>();
            if(string.IsNullOrEmpty(content)) { return vulnerabilities; }
            var reader = new StringReader(content);
            string? line;
            while (null != (line = reader.ReadLine()))
            {
                try
                {
                    string[] parts = line.Split(' ');
                    // 檢查是否有足夠的部分以識別名稱、計數和風險級別
                    if (parts.Length >= 3)
                    {
                        // 將倒數第二個部分解析為計數
                        if(!int.TryParse(parts[parts.Length - 2],out int count)){
                            continue;
                        }

                        // 獲取風險級別部分（最後一個部分）
                        string riskLevel = parts[parts.Length - 1];

                        // 獲取名稱部分（忽略最後兩個部分）
                        string name = string.Join(" ", parts, 0, parts.Length - 2);

                        vulnerabilities.Add(new Vulnerability
                        {
                            ReportID = reportId,
                            Name = name,
                            Count = count,
                            Level = riskLevel
                        });
                    }
                }
                catch(Exception ex)
                {
                    continue;
                }

            }
            return vulnerabilities;
        }
    }
}
